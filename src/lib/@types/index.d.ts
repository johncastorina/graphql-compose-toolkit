import {
  Resolver,
  ProjectionType,
  ResolverResolveParams,
  schemaComposer,
  SchemaComposer,
  ObjectTypeComposer,
} from 'graphql-compose';
import {
  ObjectTypeComposer,
  GenerateResolverType,
} from 'graphql-compose-mongoose';
import { Model } from 'mongoose';

export type TMiddlewareFunction = (
  resolve,
  source,
  args,
  context,
  info
) => Promise<Resolver> | null;

export type TCustomResolveFunction = (
  ResolverResolveParams
) => Promise<any> | any;

export type TStandardQueryOperations =
  | 'connection'
  | 'count'
  | 'findById'
  | 'findByIds'
  | 'findMany'
  | 'findOne'
  | 'dataLoader'
  | 'dataLoaderMany'
  | 'pagination';

export type TStandardMutationOperations =
  | 'createMany'
  | 'createOne'
  | 'removeById'
  | 'removeMany'
  | 'removeOne'
  | 'updateById'
  | 'updateMany'
  | 'updateOne';

export type TRelationOptions = {
  resolver: any;
  prepareArgs?: Record<string, unknown>;
  projection?: ProjectionType;
  description?: string;
  deprecationReason?: string;
};

// see https://graphql-compose.github.io/docs/basics/understanding-relations.html#relation-via-resolver
// see https://graphql-compose.github.io/docs/plugins/plugin-mongoose.html#how-to-build-nesting-relations
export type TRelation = {
  fieldName: string;
  opts: TRelationOptions;
  middleware?: TMiddlewareFunction[];
};

export type TStandardQueryResolver = {
  // one of the generated query or mutation operations
  // connection | count | findById | findByIds | findMany | findOne | pagination
  operation: TStandardQueryOperations; // 'findOne'
  // array of middleware functions in order of operation
  middleware?: TMiddlewareFunction[]; // [requireSuperAdmin]
  // resolver options -
  // see https://graphql-compose.github.io/docs/plugins/plugin-mongoose.html#resolvers-customization-options
  // common resolver options
  // https://graphql-compose.github.io/docs/plugins/plugin-mongoose.html#filterhelperargsopts
  options?: Record<string, unknown>;
};

export type TStandardMutationResolver = {
  // one of the generated query or mutation operations
  // createMany | createOne | removeById | removeMany | removeOne | updateById | updateMany | updateOne
  operation: TStandardMutationOperations;
  // array of middleware functions in order of operation
  middleware?: TMiddlewareFunction[];
  // resolver options -
  // see https://graphql-compose.github.io/docs/plugins/plugin-mongoose.html#resolvers-customization-options
  // common resolver options
  // https://graphql-compose.github.io/docs/plugins/plugin-mongoose.html#filterhelperargsopts
  options?: Record<string, unknown>;
};

export type TCustomResolver = {
  name: string;
  args?: Record<string, unknown>;
  type: any;
  // custom resolver function
  // https://graphql-compose.github.io/docs/basics/what-is-resolver.html#via-schemacomposercreateresolver
  resolve: TCustomResolveFunction;
  // array of middleware functions in order of operation
  middleware?: TMiddlewareFunction[];
};

export type TResolvers = {
  [key: string]: Resolver;
};

export interface GraphQLComposeConfig {
  // Mongoose Model
  Model: Model<any, any>;
  // ComposeMongooseOpts object specific properties
  // important to specify remove fields or only fields as needed to restrict sensitive information
  // see https://graphql-compose.github.io/docs/plugins/plugin-mongoose.html#customization-options
  // will be spread onto object being passed in as the compose mongoose options
  // field blacklist
  removeFields?: string[];
  // field whitelist
  onlyFields?: string[];
  // name is optional - it will be derived from the Model name if not provided
  // name will be the prefix for all GraphQL query and mutations
  name?: string;

  // standard crud will apply the standard operations that graphql compose mongoose provides
  useStandardQueryResolvers: boolean;
  useStandardMutationResolvers: boolean;

  // common middleware will be applied to standard crud operations
  // example: this could be base auth level middleware
  commonMiddleware: TMiddlewareFunction[];

  // overwrites or extends standard crud operations
  // overwrite with custom middleware as needed
  // extend with other operations that are autogenerated but not part of standard
  // array of query resolvers derived from resolvers generated by the library
  QueryExtend?: TStandardQueryResolver[];
  // array of mutation resolvers derived from resolvers generated by the library
  MutationExtend?: TStandardMutationResolver[];

  // Build custom relations
  // see https://graphql-compose.github.io/docs/basics/understanding-relations.html#relation-via-resolver
  relations?: TRelation[];

  // possible future embedded document schemas
  // https://graphql-compose.github.io/docs/plugins/plugin-mongoose.html#reusing-the-same-mongoose-schema-in-embedded-object-fields

  // custom fields resolvers that are placed on the current ModelTC
  CustomFields?: {
    [key: string]: {
      type: String | Boolean | JSON | any[];
      description?: string;
      resolve: any;
    };
  };
  // CustomFields?: any;
  // TODO:: fix this typing
  // ObjectTypeComposerFieldConfigDefinition<TSource, TContext, TArgs>[];

  // custom resolvers that can include relational ops, custom DB service methods, etc...
  // these custom resolvers are accessed
  // via the name of the ModelTC + the name property you specify
  QueryCustom?: TCustomResolver[];
  MutationCustom?: TCustomResolver[];

  // merged resolvers
  allResolvers?: {
    Query?: TResolvers;
    Mutation?: TResolvers;
  };
}

export interface TModelTC extends ObjectTypeComposer {
  mongooseResolvers: GenerateResolverType<any, any>;
}

export type TModelTCRegistry = {
  [key: string]: TModelTC;
};

export interface GQLComposeConfigWithModelTC extends GraphQLComposeConfig {
  ModelTC: ObjectTypeComposer | any;
  name: string;
}

export interface IGQLInputConfig {
  schemaComposer?: SchemaComposer;
  tcResolverMethodFormatFN?: (name: string, operation: string) => string;
  standardQueryResolvers?: string[];
  standardMutationResolvers?: string[];
}

export interface IGQLComposeToolKitGlobalConfig {
  schemaComposer: SchemaComposer;
  tcResolverMethodFormatFN: (name: string, operation: string) => string;
  standardQueryResolvers: string[];
  standardMutationResolvers: string[];
  addModelTC: (name: string, TCModel: ObjectTypeComposer) => void;
}
